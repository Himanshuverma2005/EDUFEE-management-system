#!/usr/bin/env node
import fs from 'fs';
import readline from 'readline';
import path from 'path';
import { fileURLToPath } from 'url';
//const fs = require('fs');
//const path = require('path');
//const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('🚀 EduFees Management System Setup');
console.log('=====================================\n');

// Check if .env file already exists
//const envPath = path.join(__dirname, '..', '.env');
//const envExamplePath = path.join(__dirname, '..', 'env.example');
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
//const envPath = path.join(__dirname, '..', '.env');
//const envExamplePath = path.join(__dirname, '..', 'env.example');
const envPath = './.env';

if (fs.existsSync(envPath)) {
  console.log('⚠️  .env file already exists!');
  rl.question('Do you want to overwrite it? (y/N): ', (answer) => {
    if (answer.toLowerCase() === 'y' || answer.toLowerCase() === 'yes') {
      runSetup();
    } else {
      console.log('Setup cancelled.');
      rl.close();
    }
  });
} else {
  runSetup();
}

function runSetup() {
  console.log('\n📋 Please provide the following information:');
  console.log('(Press Enter to use default values where applicable)\n');

  const questions = [
    {
      name: 'VITE_SUPABASE_URL',
      message: 'Supabase Project URL:',
      required: true,
      default: ''
    },
    {
      name: 'VITE_SUPABASE_ANON_KEY',
      message: 'Supabase Anon Key:',
      required: true,
      default: ''
    },
    {
      name: 'VITE_APP_NAME',
      message: 'Application Name:',
      required: false,
      default: 'EduFees Management System'
    },
    {
      name: 'VITE_APP_VERSION',
      message: 'Application Version:',
      required: false,
      default: '1.0.0'
    },
    {
      name: 'VITE_APP_ENV',
      message: 'Environment (development/production/staging):',
      required: false,
      default: 'development'
    },
    {
      name: 'VITE_ENABLE_DEBUG_MODE',
      message: 'Enable Debug Mode (true/false):',
      required: false,
      default: 'true'
    }
  ];

  const answers = {};
  let currentQuestion = 0;

  function askQuestion() {
    if (currentQuestion >= questions.length) {
      createEnvFile();
      return;
    }

    const question = questions[currentQuestion];
    const prompt = question.required 
      ? `${question.message} *: `
      : `${question.message} (${question.default}): `;

    rl.question(prompt, (answer) => {
      if (question.required && !answer.trim()) {
        console.log('❌ This field is required!');
        askQuestion();
        return;
      }

      answers[question.name] = answer.trim() || question.default;
      currentQuestion++;
      askQuestion();
    });
  }

  function createEnvFile() {
    let envContent = '# Environment Configuration for EduFees Management System\n';
    envContent += '# Generated by setup script\n\n';

    // Add all the answers
    Object.entries(answers).forEach(([key, value]) => {
      envContent += `${key}=${value}\n`;
    });

    // Add optional variables with comments
    envContent += '\n# Optional Configuration\n';
    envContent += 'VITE_ENABLE_ANALYTICS=false\n';
    envContent += 'VITE_API_TIMEOUT=30000\n';
    envContent += 'VITE_MAX_FILE_SIZE=5242880\n';
    envContent += '\n# Future Integrations\n';
    envContent += '# VITE_STRIPE_PUBLIC_KEY=your_stripe_public_key_here\n';
    envContent += '# VITE_EMAIL_SERVICE_URL=your_email_service_url_here\n';

    try {
      fs.writeFileSync(envPath, envContent);
      console.log('\n✅ .env file created successfully!');
      console.log('\n📝 Next steps:');
      console.log('1. Install dependencies: npm install');
      console.log('2. Start development server: npm run dev');
      console.log('3. Open http://localhost:5173 in your browser');
      console.log('\n🔗 For Supabase setup instructions, see README.md');
    } catch (error) {
      console.error('❌ Error creating .env file:', error.message);
    }

    rl.close();
  }

  askQuestion();
}

// Handle process termination
process.on('SIGINT', () => {
  console.log('\n\nSetup cancelled.');
  rl.close();
  process.exit(0);
}); 